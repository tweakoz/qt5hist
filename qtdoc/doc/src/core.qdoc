/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-core.html
\title Core Internals
\brief Qt's core topics

Qt contains a rich set of fundamental enablers, mainly from the \l{Qt Core}
module. Qt uses these enablers to provide higher-level UI and application
development components. The following topics explain the most important enablers
and show how to use them to implement specialized functionality not already
provided by Qt.

\section1 Objects, Properties, and Events

The QObject class forms the foundation of Qt's \l{object model} and is the
parent class of many Qt classes. The object model introduces many mechanisms such
as a \l{The Meta-Object System}{meta-object system} which allows run-time
introspection, manipulation, and invocation of \l{The property
system}{properties} and methods in the object. It also serves as the basis for
Qt's \l{The Event System}{event system}, which is a low-level way of
communicating between QObject-based objects. Another high-level form of
communication is provided in Qt's \l{Signals & Slots} mechanism. These features
can also be used in combination with \l{The State Machine Framework} which
provides a formally defined and predictable way of managing the states of your
application.

\section1 Container Classes

A \e container is a data structure whose instances are collections of other
objects. Some examples of containers are: dynamic arrays, queues, linked
lists, and associative arrays. Qt provides a set of general purpose,
template-based container classes for structuring data in memory.
See the full list of \l {Container Classes} for more details.

\section1 Internationalization

Qt uses \l{Unicode in Qt}{Unicode} for the encoding of displayable text strings.
Unicode provides support for all commonly used writing systems in the world and
is ideal for cross-platform development. Applications can also be written to
support any number of different languages with one code base using Qt's powerful
\l{Internationalization with Qt}{internationalization system}.

\section1 Inter-Process Communication

Qt provides several classes to support \l{Inter-Process Communication in
Qt}{communication between processes}. You can also launch and manage external
processes using the \l{QProcess} class.

\section1 Threading

Qt supports \l{Thread Support in Qt}{primitives and convenience functionality}
to manage \l{Threading Basics}{threads and parallelized code} in a safe and
platform-independent way.

\section1 Platform Support

Qt allows you to write platform-independent code, where the same code base can
be compiled for and deployed on different platforms without any changes. In
cases where you need to use platform-specific features and integrate with system
libraries, Qt also provides solutions for this.

Qt integrates with the windowing system on the target platform using \l{Qt
Platform Abstraction} (QPA). QPA is an abstraction of a windowing system which
makes porting Qt to new platforms simple and quick. One such system is the
Wayland protocol. Qt can be used together with \l{Wayland Support in Qt}{
Wayland} as light-weight windowing system on embedded hardware to support a
multi-process graphical user interface.

The Qt Platform Abstraction uses \l{How to Create Qt Plugins}{Qt's plugin
system}. This system provides APIs to extend Qt in specific areas (such as
adding support for new image formats, database drivers, and so on) and also for
writing your own extensible Qt applications which support third-party plugins.
*/
