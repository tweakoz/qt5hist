/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group installation
\title Installation
\brief Installing Qt on supported platforms.

The installation procedure is different on each Qt platform. This page provides
information on how to install Qt, as well as software and hardware requirements
for using Qt on each of the supported platforms. Please follow the instructions
for your platform from the following list.

*/

/*! \page install-x11.html
\title Installing Qt for X11 Platforms
\ingroup installation
\brief How to install Qt on platforms with X11.
\previouspage Installation

\tableofcontents

    Qt for X11 has some requirements that are given in more detail
    in the \l{Qt for X11 Requirements} document. A binary package is available
    and the \l{Qt Installation Program} page describes the installation in more
    detail.

\section1 Step 1: Installing the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

\section1 Step 2: Unpacking the Archive
    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-5.1.1.tar.gz}
    package, type the following commands at a command line prompt:

\snippet snippets/code/doc_src_installation.qdoc 0

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-5.1.1}
    containing the files from the archive. We only support the GNU version of
    the tar archiving utility. Note that on some systems it is called gtar.

\section1 Step 3: Building the Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Qt-5.1.1} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet snippets/code/doc_src_installation.qdoc 1

    Type \c{./configure -help} to get a list of all available options.

    To create the library and compile all the examples, tools,
    and tutorials, type:

\snippet snippets/code/doc_src_installation.qdoc 2

    If \c{-prefix} is outside the build directory, you need to install
    the library, examples, tools, and tutorials in the appropriate
    place. To do this (as root if necessary), type:

\snippet snippets/code/doc_src_installation.qdoc 3

    Note that on some systems the make utility is named differently,
    e.g. gmake. The configure script tells you which make utility to
    use.

    \b{Note:} If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 4: Set the Environment Variables

    In order to use Qt, some environment variables needs to be
    extended.

\snippet snippets/code/doc_src_installation.qdoc 4

    This is done like this:

    In \c{.profile} (if your shell is bash, ksh, zsh or sh), add the
    following lines:

\snippet snippets/code/doc_src_installation.qdoc 5

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet snippets/code/doc_src_installation.qdoc 6

    If you use a different shell, please modify your environment
    variables accordingly.

    For compilers that do not support rpath you must also extended the
    \c LD_LIBRARY_PATH environment variable to include
    \c{/usr/local/Qt-5.1.1/lib}. On Linux with GCC this step
    is not needed.

\b {That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action. Run the Qt Examples
    either by typing \c qtdemo on the command line or through the
    desktop's Main menu.

    You might also want to try the following links:

    \list
    \li \l{How to Learn Qt}
    \li \l{Qt Examples and Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*!
\page install-win.html
\title Installing Qt for Windows
\ingroup installation
\brief How to install Qt on Windows.
\previouspage Installation

\tableofcontents

    Qt for Windows has some requirements that are given in more detail in the
    \l{Qt for Windows Requirements} document. A binary package is available and
    the \l{Qt Installation Program} page describes the installation in more
    detail.

\section1 Step 1: Install the License File (commercial editions only)

    If you have the commercial edition of Qt, copy the license file
    from your account on the distribution server into your home directory
    (this may be known as the \c userprofile environment variable) and
    rename it to \c{.qt-license}. This renaming process must be done
    using a \e{command prompt} on Windows, \b{not} with Windows Explorer.
    For example on Windows 2000, \c{%USERPROFILE%} should be something
    like \c{C:\Documents and Settings\username}

    For the open source version you do not need a license file.

\section1 Step 2: Unpack the Archive

    Uncompress the files into the directory you want Qt installed;
    e.g. \c{C:\Qt\5.1.1}.

    \note The install path must not contain any spaces or Windows specific
    file system characters.

\section1 Step 3: Set the Environment variables

    We recommend creating a desktop link that opens a command
    prompt with the environment set up similar to the
    \uicontrol{Command Prompt} menu entries provided by the Windows SDKs.
    This is done by creating an application link passing a \c .cmd file setting
    up the environment and the command line option \c /k (remain open)
    to \c cmd.exe.

    Assuming the file is called \c{qt5vars.cmd}
    and the Qt folder is called \c qt-5 and located under \c C:\qt:

    \code
    REM Set up Windows SDK for 64bit
    CALL "C:\Program Files (x86)\MSVC10\VC\vcvarsall.bat" amd64
    set PATH=c:\qt\qt-5\qtbase\bin;c:\qt\qt-5\qtrepotools\bin;c:\qt\qt-5\gnuwin32\bin;%PATH%
    set QMAKESPEC=win32-msvc2010
    \endcode

    A desktop link can then be created by specifying the command
    \c{%SystemRoot%\system32\cmd.exe /E:ON /V:ON  /k c:\qt\qt5vars.cmd}
    as application and \c{c:\qt\qt-5} as working directory.

    \note Setups for MinGW are similar; they differ
    only in that the \c bin folder of the installation should be added to the
    path instead of calling the Windows SDK setup script. For MinGW, please make
    sure that no \c sh.exe can be found in the path, as it affects \c {mingw32-make}.

    Settings required by the additional libraries (see \l{Qt for Windows Requirements})
    should also go this file below the call to the Windows SDK setup script.

\section1 Step 4: Build the Qt Library

    The default behavior of configure is to create an in-source build
    of Qt 5. If you want to install Qt 5 to a separate location,
    you need to specify the command line option \c{-prefix <location>}.
    Alternatively, the command line option \c -developer-build creates
    an in-source build for developer usage.

    To configure the Qt library for a debug build for your machine, type
    the following command in the command prompt:

    \code
    configure -debug -nomake examples -opensource
    \endcode

    Type \c{configure -help} to get a list of all available options.

    To build Qt using \l{jom}, type:

    \code
    jom
    \endcode

    If you do not have \l{jom} installed, type:

    \code
    nmake
    \endcode

    For MinGW, type:

    \code
    mingw32-make
    \endcode

    If an installation prefix was given, type
    \c{jom install}, \c{nmake install} or \c{mingw32-make install}.

    \note If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{nmake distclean}
    before running \c configure again.

\b{That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action (provided in the \c examples folder
    of each module).

    You might also want to try the following links:

    \list
    \li \l{How to Learn Qt}
    \li \l{Qt Examples and Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-mac.html
\title Installing Qt for Mac OS X
\ingroup installation
\brief How to install Qt on Mac OS X.
\previouspage Installation
\tableofcontents

Qt for Mac OS X has some requirements that are given in more detail
in the \l{Qt for Mac OS X Requirements} document.

The following instructions describe how to install Qt from the source package.
A binary package is available and the \l{Qt Installation Program} page describes
the installation in more detail.

For the binary package, simply double-click on the Qt.mpkg
and follow the instructions to install Qt. You can later run the \c{uninstall-qt.py}
script to uninstall the binary package. The script is located in /Developer/Tools and
must be run as root.

\note Do not run the iPhone simulator while installing Qt. The
\l{http://openradar.appspot.com/7214991}
{iPhone simulator conflicts with the package installer}.

\section1 Step 1: Install the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-5.1.1.tar.gz}
    package, type the following commands at a command line prompt:

\snippet snippets/code/doc_src_installation.qdoc 11

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-5.1.1}
    containing the files from the archive.

\section1 Step 2:  Build the Qt Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Qt-5.1.1} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet snippets/code/doc_src_installation.qdoc 12

    Type \c{./configure -help} to get a list of all available options.

    Note that you will need to specify \c{-universal} if you want to
    build universal binaries, and also supply a path to the \c{-sdk}
    option if your development machine has a PowerPC CPU. By default,
    Qt is built as a framework, but you can built it as a set of
    dynamic libraries (dylibs) by specifying the \c{-no-framework}
    option.

    Qt can also be configured to be built with debugging symbols. This
    process is described in detail in the \l{Debugging Techniques}
    document.

    To create the library and compile all the examples, tools,
    and tutorials, type:

\snippet snippets/code/doc_src_installation.qdoc 13

    If \c{-prefix} is outside the build directory, you need to install
    the library, examples, tools, and tutorials in the appropriate
    place. To do this, type:

\snippet snippets/code/doc_src_installation.qdoc 14

    This command requires that you have administrator access
    on your machine.

    \note There is a potential race condition when running make install with multiple
    jobs. It is best to only run one make job (-j1) for the install.

    If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 3: Set the Environment variables

    In order to use Qt, some environment variables need to be
    extended.

\snippet snippets/code/doc_src_installation.qdoc 15

    This is done like this:

    In \c{.profile} (if your shell is bash), add the following lines:

\snippet snippets/code/doc_src_installation.qdoc 16

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet snippets/code/doc_src_installation.qdoc 17

    If you use a different shell, please modify your environment
    variables accordingly.

\b {That's all. Qt is now installed.}

\section1 Qt Demos and Examples
    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action. Run the Qt Examples
    either by typing \c qtdemo on the command line or through the
    desktop's Start menu.

    You might also want to try the following links:

    \list
    \li \l{How to Learn Qt}
    \li \l{Qt Examples and Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-wince.html
\title Installing Qt for Windows CE
\ingroup installation
\ingroup qtce
\brief How to install Qt for Windows CE.
\previouspage Installation
\tableofcontents

Qt for Windows CE has some requirements that are given in more detail
in the \l{Qt for Windows CE Requirements} document.

\section1 Step 1: Install the License File (commercial editions only)
    Uncompress the files to the directory where you want to build;
    e.g., \c{C:\Qt\5.1.1}.

    \note The install path must not contain any spaces.

\section1 Step 2: Set the Environment variables

    In order to build and use Qt, the \c PATH environment variable needs
    to be extended:

    Make sure the environment variables for your compiler are set.
    Or simply use the "\gui{Visual Studio Command Prompt}" from the Start menu.

\section1 Step 3: Configure Qt

    To configure Qt, for a custom SDK, type the
    following:

\snippet snippets/code/doc_src_installation.qdoc 19

    If you want to configure Qt for another platform or with other
    options, type \c{configure -help} to get a list of all available
    options. See the \c README file for the list of supported
    platforms.

\section1 Step 4: Build Qt Library

    To build Qt type:

    \snippet snippets/code/doc_src_installation.qdoc 22

\b{That's all. Qt is now installed.}

\section1 Qt Examples

    To get started with Qt, you can check out the examples found in the
    \c{examples} directory of your Qt installation. The documentation can
    be found in \c{doc\html}.

    \note If you reconfigure Qt for a different platform,
    make sure you start with a new clean console to get rid of the
    platform dependent include directories.

    The links below provide further information for using Qt:
    \list
    \li \l{How to Learn Qt}
    \li \l{Qt Examples and Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    You might also want to try the following Windows CE specific links:
    \list
    \li \l{Windows CE - Introduction to using Qt}
    \li \l{Windows CE - Working with Custom SDKs}
    \li \l{Windows CE - Using shadow builds}
    \li \l{Windows CE - Signing}
    \endlist

    Information on feature and performance tuning for embedded builds can
    be found on the following pages:
    \list
    \li \l{Fine-Tuning Features in Qt}
    \li \l{Qt Performance Tuning}
    \endlist

    We hope you will enjoy using Qt. Good luck!
*/

/*!
    \page requirements.html
    \title General Qt Requirements
    \ingroup installation
    \brief Outlines the general requirements and dependencies needed to install Qt.

    This page describes the specific requirements of libraries and components on which
    Qt depends. For information about installing Qt, see the \l{Installation} page.

    For information about the platforms that Qt supports, see the \l{Supported Platforms}
    page.

    \section1 OpenSSL (version 0.9.7 or later)

    Support for \l{SSL}{Secure Sockets Layer (SSL)} communication is provided by the
    \l{OpenSSL Toolkit}, which must be obtained separately. More information about
    enabling SSL support can be found in the \l{Secure Sockets Layer (SSL) Classes}
    document.

    \section1 Platform-Specific Requirements

    Each platform has its own specific set of dependencies. Please see the relevant
    page for more details about the components that are required to build and install
    Qt on your platform.

    \list
    \li \l{Qt for Mac OS X Requirements}
    \li \l{Qt for Windows CE Requirements}
    \li \l{Qt for Windows Requirements}
    \li \l{Qt for X11 Requirements}
    \endlist
*/

/*!
    \page requirements-win.html
    \title Qt for Windows Requirements
    \ingroup installation
    \brief Setting up the Windows environment for Qt.
    \previouspage General Qt Requirements

    \section1 Graphics Drivers

    For QtQuick 2.0 to work, a graphics driver that provides OpenGL 2.1 or higher is required.
    The Windows default driver provides only OpenGL 1.1, which is not sufficient. To work
    around this limitation, Qt now includes a version of the \l{ANGLE} project which is used
    by default. ANGLE implements the OpenGL ES 2.0 API on top of DirectX 9. ANGLE requires
    that the DirectX SDK is installed when building Qt.

    To use a custom version of ANGLE, set the \c ANGLE_DIR environment variable to point to
    the ANGLE source tree before building Qt.

    If you have installed additional OpenGL drivers from your hardware vendor, then you may
    want to consider using this version of OpenGL instead of ANGLE. To use "desktop" OpenGL
    you should pass the command line options \c{-opengl desktop} to configure.

    If you wish to use an OpenGL ES 2.0 emulator other than ANGLE, then you can use the
    following command line options: \c{-opengl es2 -no-angle}.

    \section1 Libraries

    \list
        \li \l{ICU}: Qt 5 can make use of the ICU library for
           UNICODE and Globalization support (required for QtWebKit).
           At compile time, the include and lib folders of the ICU installation must be appended to
           the \c INCLUDE and \c LIB environment variables.
           At run-time, the ICU DLLs need to be found. This can be achieved by copying
           the DLLs to the application folder or adding the bin folder of
           the ICU installation to the \c PATH environment variable.

        \li \l{ANGLE}: This library converts
           OpenGL ES 2.0 API calls to DirectX 9, removing the need to install
           graphics drivers on the target machines.
           \l{http://code.google.com/p/angleproject/wiki/DevSetup}{Building}
           the library requires the installation of the
           \l{Direct X SDK}.

           \note When building for 64bit, de-activate the \c WarnAsError option
           in every project file (as otherwise integer conversion warnings will
           break the build).
    \endlist

    \section1 Development tools

    \list
        \li Install a recent version of ActivePerl
           and add the installation location to your PATH.
           \note Please make sure the perl executable is found in the path before
           the perl executable provided by msysgit, since the latter is outdated.

        \li Install Python from \l{http://www.python.org/download/}{here}
           and add the installation location to your PATH in order to be able
           to build QtJsBackend and QtWebKit.

        \li Install \l{http://www.ruby-lang.org}{Ruby} from \l{http://rubyinstaller.org/}{here}
           and add the installation location to your PATH in order to be able
           to build QtWebKit.

        \li \l{jom} is a replacement for \c nmake which makes use of all CPU cores
           and thus speeds up building.
    \endlist

    QtWebKit and ANGLE depend on some extra tools from the \l{GnuWin32 Project}
    which are provided for your convenience in the \c gnuwin32/bin folder:

    \list
        \li \l{http://gnuwin32.sourceforge.net/downlinks/bison.php}{Bison}
        \li \l{http://gnuwin32.sourceforge.net/downlinks/gperf.php}{GPerf}
        \li \l{http://gnuwin32.sourceforge.net/downlinks/flex.php}{Flex}
    \endlist

    The folder should be added to the PATH.

    \section1 SDKs and Compilers

    A Windows SDK is required to develop Qt applications on Windows.
    Below, we have listed some potential options for SDKs and compilers.

    \list
        \li Windows SDK 8 (with Visual Studio 2012 Express).
            As of Windows 8, the SDK no longer ships with a complete command-line build environment.
            You must install a compiler and build environment separately. If you require a
            complete development environment that includes compilers and a build environment,
            you can download Visual Studio 2012 Express, which includes the appropriate
            components of the Windows SDK.
            \l{http://msdn.microsoft.com/en-us/windows/desktop/hh852363.aspx}
        \li Windows SDK 7.1.
            Note that, as of 16.3.2012, if you use this SDK with Visual Studio 2010,
            installing the SDK requires installing the following packages
            in this order (see \c readme.html provided with the service pack):
            \list
                \li Install Visual Studio 2010
                \li Install Windows SDK 7.1
                \li Install Visual Studio 2010 SP1
                \li Install Visual C++ 2010 SP1 Compiler Update for the Windows SDK 7.1
            \endlist
        \li Windows SDK 7.
        \li A MinGW toolchain with g++ version 4.7 or higher. Qt 5 is tested regularly with a \
            \l{http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.8.0/32-bit/threads-posix/dwarf/x32-4.8.0-release-posix-dwarf-rev1.7z}
            {32 bit gcc 4.8.0 toolchain} from the \l{http://mingwbuilds.sourceforge.net}{MinGW-builds}
            project.

    \endlist

    \section2 Popular IDEs

    There are several popular IDEs for Qt development on Windows:

    \list
        \li Qt Creator
        \li Visual Studio
        \li Eclipse
    \endlist

    For the most up to date information about QtWebKit dependencies,
    please refer to the \l{http://trac.webkit.org/wiki/BuildingQtOnWindows}{QtWebKit wiki for Windows}.

    \sa {Known Issues}
*/

/*!
    \page requirements-mac.html
    \title Qt for Mac OS X Requirements
    \ingroup installation
    \brief Setting up the Mac OS X environment for Qt.
    \previouspage General Qt Requirements

    Qt requires Xcode to be installed on the system. You can get it from:

    \l{http://developer.apple.com/xcode/}

    The command line tools are also needed, they can be installed within XCode:

    Xcode->Preferences->Downloads->Components->Command Line Tools

    \sa {Known Issues}
*/

/*!
    \page requirements-x11.html
    \title Qt for X11 Requirements
    \ingroup installation
    \brief Setting up the X11 environment for Qt.
    \previouspage General Qt Requirements

    \tableofcontents

    \section1 Platform plugin dependencies

    On X11 the "xcb" QPA (Qt Platform Abstraction) platform plugin is used. It provides
    the basic functionality needed by QtGui and QtWidgets to run against X11.
    Its library dependencies are described the following table. To build
    Qt from its source code, you will also need to install the development
    packages for these libraries for your system.

    It's possible to configure Qt with -qt-xcb, which compiles in a set of xcb helper
    libraries instead of trying to link against the system versions. This can help make
    Qt less dependent on some of the xcb helper libraries that might not be available
    on all distributions. The table specifies which dependencies are provided by -qt-xcb.

    \table 100%
    \header
    \li Name
    \li Library
    \li Notes
    \li Configuration options
    \li Minimum working version
    \row {id="OptionalColor"}
    \li XRender
    \li libXrender
    \li X Rendering Extension; used for anti-aliasing and alpha cursor support
    \li \tt{-xrender} or auto-detected
    \li 0.9.0
    \row {id="OptionalColor"}
    \li xcb-render
    \li libxcb-render
    \li X C Bindings for Render extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="OptionalColor"}
    \li xcb-render-util
    \li libxcb-render-util
    \li Utility library for XCB for Render extension
    \li auto-detected or provided by -qt-xcb
    \li 0.3.8
    \row {id="OptionalColor"}
    \li xcb-shape
    \li libxcb-shape
    \li X C Bindings for Shape extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="DefaultColor"}
    \li xcb-randr
    \li libxcb-randr
    \li X C Bindings for Resize and Rotate Extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="DefaultColor"}
    \li xcb-xfixes
    \li libxcb-xfixes
    \li X C Bindings for Fixes Extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="DefaultColor"}
    \li xcb-sync
    \li libxcb-sync
    \li X C Bindings for Sync Extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="DefaultColor"}
    \li xcb-shm
    \li libxcb-shm
    \li X C Bindings for Shared Memory Extension
    \li auto-detected or provided by -qt-xcb
    \li 1.8.1
    \row {id="DefaultColor"}
    \li xcb-icccm
    \li libxcb-icccm
    \li X C Bindings for ICCCM Protocol
    \li auto-detected or provided by -qt-xcb
    \li 0.3.9
    \row {id="DefaultColor"}
    \li xcb-keysyms
    \li libxcb-keysyms
    \li Utility library for XCB for keycode conversion
    \li auto-detected or provided by -qt-xcb
    \li 0.3.9
    \row {id="DefaultColor"}
    \li xcb-image
    \li libxcb-image
    \li Utility library for XCB for XImage and XShmImage, used for QBackingStore and cursor support
    \li auto-detected or provided by -qt-xcb
    \li 0.3.9

    \row {id="OptionalColor"}
    \li Fontconfig
    \li libfontconfig
    \li Font customization and configuration
    \li \tt{-fontconfig} or auto-detected
    \li 2.1
    \row {id="OptionalColor"}
    \li FreeType
    \li libfreetype
    \li Font engine
    \li
    \li 2.1.3

    \row {id="DefaultColor"}
    \li Xi
    \li libXi
    \li X11 Input Extensions
    \li \tt{-xinput} or auto-detected
    \li 1.3.0
    \row {id="DefaultColor"}
    \li Xext
    \li libXext
    \li X Extensions
    \li
    \li 6.4.3
    \row {id="DefaultColor"}
    \li X11
    \li libX11
    \li X11 client-side library
    \li
    \li 6.2.1
    \row {id="DefaultColor"}
    \li xcb
    \li libxcb
    \li X C Binding library
    \li
    \li 1.8.1
    \row {id="DefaultColor"}
    \li X11-xcb
    \li libX11-xcb
    \li Xlib/XCB interface library
    \li
    \li 1.3.2

    \row {id="SMColor"}
    \li SM
    \li libSM
    \li X Session Management
    \li \tt{-sm} or auto-detected
    \li 6.0.4
    \row {id="SMColor"}
    \li ICE
    \li libICE
    \li Inter-Client Exchange
    \li \tt{-sm} or auto-detected
    \li 6.3.5

    \row {id="GlibColor"}
    \li glib
    \li libglib-2.0
    \li Common event loop handling
    \li \tt{-glib} or auto-detected
    \li 2.8.3
    \row {id="PthreadColor"}
    \li pthread
    \li libpthread
    \li Multithreading
    \li
    \li 2.3.5
    \endtable

    Development packages for these libraries contain header files that are used
    when building Qt from its source code. On Debian-based GNU/Linux systems,
    for example, we recommend that you install the following development
    packages:

    \list
    \li libfontconfig1-dev
    \li libfreetype6-dev
    \li libx11-dev
    \li libxext-dev
    \li libxfixes-dev
    \li libxi-dev
    \li libxrender-dev
    \li libxcb1-dev
    \li libx11-xcb-dev
    \li libxcb-glx0-dev
    \endlist

    Additionally, if you do not configure with -qt-xcb, you should also
    install these development packages:

    \list
    \li libxcb-keysyms1-dev
    \li libxcb-image0-dev
    \li libxcb-shm0-dev
    \li libxcb-icccm4-dev
    \li libxcb-sync0-dev
    \li libxcb-xfixes0-dev
    \li libxcb-shape0-dev
    \li libxcb-randr0-dev
    \li libxcb-render-util0-dev
    \endlist

    Some of these packages depend on others in this list, so installing one
    may cause others to be automatically installed. Other distributions may
    provide system packages with similar names.

    \section1 OpenGL Dependencies

    The configure script will autodetect if OpenGL headers and libraries are
    installed on your system, and if so, it will include the QtOpenGL module
    in the Qt library.

    If your OpenGL headers or libraries are placed in a non-standard directory,
    you may need to change the \c QMAKE_INCDIR_OPENGL and/or
    \c QMAKE_LIBDIR_OPENGL in the config file for your system.

    The QGL documentation assumes that you are familiar with OpenGL
    programming. If you're new to the subject a good starting point is
    \l{http://www.opengl.org/}.

    \section1 Multimedia Dependencies

    As described in the \l{Multimedia Overview}, Qt Multimedia uses the GStreamer multimedia
    framework as the backend for audio and video playback on Linux. The minimum required
    version of GStreamer is 0.10.

    To build Qt Multimedia, you need the GStreamer library, base plugins, and development
    files for your system. The package names for GStreamer vary between Linux
    distributions; try searching for \c gstreamer or \c libgstreamer in your
    distribution's package repository to find suitable packages.

    \section1 QtWebKit Dependencies

    QtWebKit depends on some extra development tools in addition to those required for the rest of Qt.

    \note These dependencies are only needed if you use a source version of Qt.
          They are not required when using a prebuilt library.

    \list
        \li gperf
        \li bison
        \li flex (v2.5.33 or later)
        \li sqlite (development version)
        \li fontconfig (development version)
        \li xrender (development version)
        \li gstreamer (development version)
    \endlist

    These should be available in most major Linux distributions, but the exact install instructions will vary.

    For the most up to date information about QtWebKit dependencies, please refer to the \l{http://trac.webkit.org/wiki/BuildingQtOnLinux}{QtWebKit wiki for Linux}

    \sa {Known Issues}
*/

/*!
    \page requirements-wince.html
    \title Qt for Windows CE Requirements
    \ingroup installation
    \brief Setting up the Windows CE environment for Qt.
    \previouspage General Qt Requirements

    Qt is known to work with Visual Studio 2005/2008 and SDKs for
    Windows CE 6/7 development on Windows XP and newer:

    Device manufacturers may prefer to make their own customized version of
    Windows CE using Platform Builder. In order for Qt for Windows CE to
    support a custom SDK, a build specification needs to be created. More
    information on Windows CE Customization can be found
    \l{Windows CE - Working with Custom SDKs}{here}.

    \section3 Requirements
    \list
        \li Development environment:
        \list
            \li Microsoft Visual Studio 2005 (Standard Edition) or higher
            \li ActivePerl
        \endlist
        \li Operating Systems
        \list
            \li Windows Embedded Compact  6 and 7
        \endlist
        \li Hardware Platform
        \list
            \li Supported on ARM, x86
            \li (Compiles on SH4 and MIPS)
        \endlist
    \endlist

        \sa {Known Issues}
*/
