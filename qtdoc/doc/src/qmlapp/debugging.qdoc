/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-debugging.html
\ingroup qtquick-tools
\title Debugging QML Applications
\brief debugging tools in QML

\section1 Console API

\section2 Log

\c console.log, console.debug, console.info, console.warn and console.error can be used to print
debugging information to the console. For example:

\code
function f(a, b) {
  console.log("a is ", a, "b is ", b);
}
\endcode

The output is generated using the qDebug, qWarning, qCritical methods in C++
(see also \l {Debugging Techniques}).

Setting the environment variable QML_CONSOLE_EXTENDED also prints the source
code location of the call.

\section2 Assert

\c console.assert tests that an expression is true. If not, it will write an optional message
to the console and print the stack trace.

\code
function f() {
  var x = 12
  console.assert(x == 12, "This will pass");
  console.assert(x > 12, "This will fail");
}
\endcode

\section2 Timer

\c console.time and console.timeEnd log the time (in milliseconds) that was spent between
the calls. Both take a string argument that identifies the measurement. For example:

\code
function f() {
    console.time("wholeFunction");
    console.time("firstPart");
    // first part
    console.timeEnd("firstPart");
    // second part
    console.timeEnd("wholeFunction");
}
\endcode

\section2 Trace

\c console.trace prints the stack trace of the JavaScript execution at the point where
it was called. The stack trace info contains the function name, file name, line number
and column number. The stack trace is limited to last 10 stack frames.

\section2 Count

\c console.count prints the current number of times a particular piece of code has been executed,
along with a message. That is,

\code
function f() {
  console.count("f called");
}
\endcode

will print \c{f called: 1}, \c{f called: 2} ... whenever \c{f()} is executed.

\section2 Profile

\c console.profile turns on the QML and JavaScript profilers. Nested calls are not
supported and a warning will be printed to the console.

\c console.profileEnd turns off the QML and JavaScript profilers. Calling this function
without a previous call to console.profile will print a warning to the console. A
profiling client should have been attached before this call to receive and store the
profiling data. For example:

\code
function f() {
    console.profile();
    //Call some function that needs to be profiled.
    //Ensure that a client is attached before ending
    //the profiling session.
    console.profileEnd();
}
\endcode

\section2 Exception

\c console.exception prints an error message together with the stack trace of JavaScript
execution at the point where it is called.

\section1 Debugging module imports

The \c QML_IMPORT_TRACE environment variable can be set to enable debug output
from QML's import loading mechanisms.

For example, for a simple QML file like this:

\qml
import QtQuick 2.0

Rectangle { width: 100; height: 100 }
\endqml

If you set \c {QML_IMPORT_TRACE=1} before running the \l{qtquick-qmlscene.html}
{QML Scene} (or your QML C++ application), you will see output similar to this:

\code
QQmlImportDatabase::addImportPath "/qt-sdk/imports"
QQmlImportDatabase::addImportPath "/qt-sdk/bin/QMLViewer.app/Contents/MacOS"
QQmlImportDatabase::addToImport 0x106237370 "." -1.-1 File as ""
QQmlImportDatabase::addToImport 0x106237370 "Qt" 4.7 Library as ""
QQmlImportDatabase::resolveType "Rectangle" = "QDeclarativeRectangle"
\endcode


\section1 Debugging with Qt Creator

\l{http://qt-project.org/doc/qtcreator}{Qt Creator} provides built-in
support for QML debugging. QML projects and standalone C++ applications that
utilize QML can be debugged on desktops as well as on remote devices.
For more information, see the Qt Creator Manual.

*/
