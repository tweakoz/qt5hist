/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title Qt QML Release Notes
\page qtqml-releasenotes.html
\inqmlmodule QtQuick 2.0

\section1 Qt 5.0

The QtQml C++ module is new in Qt 5. It provides the QML engine and implements
the QML language supporting infrastructure.

(Prior to Qt 5, this functionality was provided by the QtDeclarative module, which
has now been replaced by the new QtQml and QtQuick C++ modules. See the
\l {Porting QML Applications to Qt 5} for more information.)

\section2 QML Engine

\list
\li JavaScript engine has changed to V8.
\li Various parser and compiler optimizations have been implemented, as well as a new bindings optimizer.
\li New QQmlEngine::trimComponentCache() method safely discards unused data in the engine's component cache to free memory.
\endlist

\section2 Component and Object Creation

\list
\li QML objects can now be created asynchronously to improve application performance.
    \list
    \li New QQmlIncubator and QQmlIncubationController C++ classes can be used to create objects asynchronously.
    \li From QML code, this behavior can enabled by:
        \list
        \li Calling the new Component \l{Component::incubateObject} method
        \li Passing the \c Component.Asynchronous parameter to \c Qt.createComponent()
        \li Loading a \l Loader object asynchronously using the \l{Loader::}{asynchronous} property
        \endlist
    \endlist
\li The component returned by \c Qt.createComponent() is no longer parented to the engine.  Be sure to hold a reference, or provide a parent.
\endlist

\section2 Type System

\list
\li New \l var property type. This is a general-purpose property type which obsoletes the \l variant type.
    Properties of the \l var type may hold JavaScript references.
\li QML properties of type \l var and \l variant can now hold pixmaps. See \l {Scarce Resources in JavaScript} for more information.
\li Value type improvements:
    \list
    \li QML now supports defining properties of value type basic types within QML documents.  Supported types include
        QSizeF, QPointF and QRectF as \c size, \c point and \c rect respectively.
    \li QColor is now a value type provided by the QtQuick module.  The red, green, blue and alpha channels
        of a \l color property can be accessed via \c r, \c g, \c b and \c a properties.
    \li Factory functions for various value types have been added to the \c Qt object exposed to QML.
        Some of those functions require the QtQuick module to be imported in order to return valid values.
        See the QtQuick 2.0 release notes for more information about these functions.
    \endlist
\li Support for sequence types QList<int>, QList<qreal>, QList<bool>, QList<QUrl>,
    QList<QString> and QStringList has been improved. QObjects can define Q_PROPERTYs of
    these types which can be accessed transparently from JavaScript.
\endlist

\section2 Modules and Imports

\list
\li Arbitrary functionality may be provided in a namespace through a singleton type.  See qmlRegisterSingletonType() for more information.
\li JavaScript (.js) files may now import QML modules and other JavaScript files using the ".import" syntax.
\endlist

\section2 Other

\list
\li QQmlExpression can now be constructed directly (and more efficiently) from a QQmlScriptString.
\li The \l {QML:Qt} object now provides a \l{QML:Qt::inputMethod} property to access the active
    text input method for an application.
\endlist

*/

